# ================================
# Build image
# ================================
FROM swift:5.3-focal as build

# Install OS updates and, if needed, sqlite3
# 安装更新，如果需要，安装 sqlite3
RUN export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    && apt-get -q update \
    && apt-get -q dist-upgrade -y \
#   && apt-get install -y libsqlite3-dev \
    && apt-get install -y zip \
    && rm -rf /var/lib/apt/lists/*

# Set up a build area
# 设置构建目录
WORKDIR /build

# First just resolve dependencies.
#  解决依赖
# This creates a cached layer that can be reused
# 这将创建一个可重复使用的缓存层
# as long as your Package.swift/Package.resolved
# files do not change.
COPY ./Package.* ./
RUN swift package resolve

# Copy entire repo into container
# 将整个仓库复制到容器中
COPY . .

# Build everything, with optimizations and test discovery
# 通过优化和测试构建
RUN swift build --enable-test-discovery -c release

# Switch to the staging area
# 切换到暂存区
WORKDIR /staging

# Uncomment the next line if you need to load resources from the `Public` directory.
# 如果您需要从“公共”目录中加载资源，请取消注释下一行。
# Ensure that by default, neither the directory nor any of its contents are writable.
# 确保默认情况下，目录及其任何内容均不可写。
# 
RUN mv /build/Public ./Public && chmod -R a-w ./Public

# Copy main executable to staging area
# 将主要可执行文件复制到暂存区
# We copy all needed Swift runtime libraries into this folder as well.
# 复制依赖库
# We do this by checking which libraries are needed at runtime with the ldd command and copy only those that have swift in the name.
RUN cp "$(swift build --package-path /build -c release --show-bin-path)/Run" ./ \
    && ldd ./Run | grep swift | awk '{print $3}' | xargs cp -Lv -t ./ \
    && ln -s "Run" "bootstrap" \
    && zip --symlinks lambda.zip *